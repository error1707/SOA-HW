// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: main.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikiPathLengthMeterClient is the client API for WikiPathLengthMeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiPathLengthMeterClient interface {
	GetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserID, error)
	MeasurePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*Empty, error)
	GetResults(ctx context.Context, in *UserID, opts ...grpc.CallOption) (WikiPathLengthMeter_GetResultsClient, error)
}

type wikiPathLengthMeterClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiPathLengthMeterClient(cc grpc.ClientConnInterface) WikiPathLengthMeterClient {
	return &wikiPathLengthMeterClient{cc}
}

func (c *wikiPathLengthMeterClient) GetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/WikiPathLengthMeter/GetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiPathLengthMeterClient) MeasurePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WikiPathLengthMeter/MeasurePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiPathLengthMeterClient) GetResults(ctx context.Context, in *UserID, opts ...grpc.CallOption) (WikiPathLengthMeter_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WikiPathLengthMeter_ServiceDesc.Streams[0], "/WikiPathLengthMeter/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiPathLengthMeterGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiPathLengthMeter_GetResultsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type wikiPathLengthMeterGetResultsClient struct {
	grpc.ClientStream
}

func (x *wikiPathLengthMeterGetResultsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WikiPathLengthMeterServer is the server API for WikiPathLengthMeter service.
// All implementations must embed UnimplementedWikiPathLengthMeterServer
// for forward compatibility
type WikiPathLengthMeterServer interface {
	GetID(context.Context, *Empty) (*UserID, error)
	MeasurePath(context.Context, *PathRequest) (*Empty, error)
	GetResults(*UserID, WikiPathLengthMeter_GetResultsServer) error
	mustEmbedUnimplementedWikiPathLengthMeterServer()
}

// UnimplementedWikiPathLengthMeterServer must be embedded to have forward compatible implementations.
type UnimplementedWikiPathLengthMeterServer struct {
}

func (UnimplementedWikiPathLengthMeterServer) GetID(context.Context, *Empty) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (UnimplementedWikiPathLengthMeterServer) MeasurePath(context.Context, *PathRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeasurePath not implemented")
}
func (UnimplementedWikiPathLengthMeterServer) GetResults(*UserID, WikiPathLengthMeter_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedWikiPathLengthMeterServer) mustEmbedUnimplementedWikiPathLengthMeterServer() {}

// UnsafeWikiPathLengthMeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiPathLengthMeterServer will
// result in compilation errors.
type UnsafeWikiPathLengthMeterServer interface {
	mustEmbedUnimplementedWikiPathLengthMeterServer()
}

func RegisterWikiPathLengthMeterServer(s grpc.ServiceRegistrar, srv WikiPathLengthMeterServer) {
	s.RegisterService(&WikiPathLengthMeter_ServiceDesc, srv)
}

func _WikiPathLengthMeter_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiPathLengthMeterServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WikiPathLengthMeter/GetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiPathLengthMeterServer).GetID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiPathLengthMeter_MeasurePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiPathLengthMeterServer).MeasurePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WikiPathLengthMeter/MeasurePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiPathLengthMeterServer).MeasurePath(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiPathLengthMeter_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiPathLengthMeterServer).GetResults(m, &wikiPathLengthMeterGetResultsServer{stream})
}

type WikiPathLengthMeter_GetResultsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type wikiPathLengthMeterGetResultsServer struct {
	grpc.ServerStream
}

func (x *wikiPathLengthMeterGetResultsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

// WikiPathLengthMeter_ServiceDesc is the grpc.ServiceDesc for WikiPathLengthMeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiPathLengthMeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WikiPathLengthMeter",
	HandlerType: (*WikiPathLengthMeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetID",
			Handler:    _WikiPathLengthMeter_GetID_Handler,
		},
		{
			MethodName: "MeasurePath",
			Handler:    _WikiPathLengthMeter_MeasurePath_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResults",
			Handler:       _WikiPathLengthMeter_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}
