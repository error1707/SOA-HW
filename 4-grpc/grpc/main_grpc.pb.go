// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: main.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	SetUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UUID, error)
	ListRooms(ctx context.Context, in *NoArgs, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	PlayGame(ctx context.Context, opts ...grpc.CallOption) (Mafia_PlayGameClient, error)
	GetPlayers(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Mafia_GetPlayersClient, error)
	StartChat(ctx context.Context, opts ...grpc.CallOption) (Mafia_StartChatClient, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) SetUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/Mafia/SetUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) ListRooms(ctx context.Context, in *NoArgs, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, "/Mafia/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) PlayGame(ctx context.Context, opts ...grpc.CallOption) (Mafia_PlayGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/Mafia/PlayGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaPlayGameClient{stream}
	return x, nil
}

type Mafia_PlayGameClient interface {
	Send(*GameAction) error
	Recv() (*GameAction, error)
	grpc.ClientStream
}

type mafiaPlayGameClient struct {
	grpc.ClientStream
}

func (x *mafiaPlayGameClient) Send(m *GameAction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaPlayGameClient) Recv() (*GameAction, error) {
	m := new(GameAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) GetPlayers(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Mafia_GetPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[1], "/Mafia/GetPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaGetPlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_GetPlayersClient interface {
	Recv() (*PlayersChange, error)
	grpc.ClientStream
}

type mafiaGetPlayersClient struct {
	grpc.ClientStream
}

func (x *mafiaGetPlayersClient) Recv() (*PlayersChange, error) {
	m := new(PlayersChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) StartChat(ctx context.Context, opts ...grpc.CallOption) (Mafia_StartChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[2], "/Mafia/StartChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaStartChatClient{stream}
	return x, nil
}

type Mafia_StartChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type mafiaStartChatClient struct {
	grpc.ClientStream
}

func (x *mafiaStartChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaStartChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	SetUsername(context.Context, *Username) (*UUID, error)
	ListRooms(context.Context, *NoArgs) (*ListRoomsResponse, error)
	PlayGame(Mafia_PlayGameServer) error
	GetPlayers(*UUID, Mafia_GetPlayersServer) error
	StartChat(Mafia_StartChatServer) error
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) SetUsername(context.Context, *Username) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsername not implemented")
}
func (UnimplementedMafiaServer) ListRooms(context.Context, *NoArgs) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedMafiaServer) PlayGame(Mafia_PlayGameServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedMafiaServer) GetPlayers(*UUID, Mafia_GetPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedMafiaServer) StartChat(Mafia_StartChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StartChat not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_SetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).SetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia/SetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).SetUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).ListRooms(ctx, req.(*NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_PlayGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaServer).PlayGame(&mafiaPlayGameServer{stream})
}

type Mafia_PlayGameServer interface {
	Send(*GameAction) error
	Recv() (*GameAction, error)
	grpc.ServerStream
}

type mafiaPlayGameServer struct {
	grpc.ServerStream
}

func (x *mafiaPlayGameServer) Send(m *GameAction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaPlayGameServer) Recv() (*GameAction, error) {
	m := new(GameAction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mafia_GetPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).GetPlayers(m, &mafiaGetPlayersServer{stream})
}

type Mafia_GetPlayersServer interface {
	Send(*PlayersChange) error
	grpc.ServerStream
}

type mafiaGetPlayersServer struct {
	grpc.ServerStream
}

func (x *mafiaGetPlayersServer) Send(m *PlayersChange) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_StartChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaServer).StartChat(&mafiaStartChatServer{stream})
}

type Mafia_StartChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type mafiaStartChatServer struct {
	grpc.ServerStream
}

func (x *mafiaStartChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaStartChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUsername",
			Handler:    _Mafia_SetUsername_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _Mafia_ListRooms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayGame",
			Handler:       _Mafia_PlayGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPlayers",
			Handler:       _Mafia_GetPlayers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartChat",
			Handler:       _Mafia_StartChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
